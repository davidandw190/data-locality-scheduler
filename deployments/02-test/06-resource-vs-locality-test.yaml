apiVersion: v1
kind: ConfigMap
metadata:
  name: resource-locality-test
  namespace: data-locality-scheduler
data:
  processor.py: |
    import os
    import time
    import socket
    import json

    node_name = os.environ.get("NODE_NAME", "unknown")
    workload_type = os.environ.get("WORKLOAD_TYPE", "unknown")

    print(f"Running {workload_type} workload on node: {node_name}")
    print(f"Hostname: {socket.gethostname()}")

    # Record workload details
    with open(f"/tmp/{workload_type}-execution.json", "w") as f:
        json.dump({
            "workload": workload_type,
            "node": node_name,
            "timestamp": time.time()
        }, f)

    # Simulate processing
    time.sleep(3600)
---
apiVersion: v1
kind: Pod
metadata:
  name: compute-intensive-processor
  namespace: data-locality-scheduler
  annotations:
    data.scheduler.thesis/input-1: "test-bucket/small-data.json,1048576,2,2,json"
    data.scheduler.thesis/output-1: "results-bucket/compute-results.json,5242880,0,3,json"
    scheduler.thesis/prefer-cloud: "true"
spec:
  schedulerName: data-locality-scheduler
  containers:
  - name: compute-processor
    image: python:3.11
    command: [ "python", "/code/processor.py" ]
    env:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: WORKLOAD_TYPE
      value: "compute-intensive"
    volumeMounts:
    - name: code
      mountPath: /code
    resources:
      requests:
        memory: "2Gi"
        cpu: "1"
      limits:
        memory: "4Gi"
        cpu: "2"
  volumes:
  - name: code
    configMap:
      name: resource-locality-test
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: balanced-data-processor
  namespace: data-locality-scheduler
  annotations:
    data.scheduler.thesis/input-1: "region2-bucket/medium-data.json,104857600,10,5,json"
    data.scheduler.thesis/output-1: "results-bucket/medium-results.json,52428800,0,4,json"
    scheduler.thesis/data-intensive: "true"
spec:
  schedulerName: data-locality-scheduler
  containers:
  - name: balanced-processor
    image: python:3.11
    command: [ "python", "/code/processor.py" ]
    env:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: WORKLOAD_TYPE
      value: "balanced-processing"
    volumeMounts:
    - name: code
      mountPath: /code
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1"
  volumes:
  - name: code
    configMap:
      name: resource-locality-test
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: memory-intensive-processor
  namespace: data-locality-scheduler
  annotations:
    data.scheduler.thesis/input-1: "edge-bucket/edge-data.json,1048576,5,3,json"
    data.scheduler.thesis/output-1: "results-bucket/memory-results.json,201171520,0,4,json"
    scheduler.thesis/prefer-edge: "true"
spec:
  schedulerName: data-locality-scheduler
  containers:
  - name: memory-processor
    image: python:3.11
    command: [ "python", "/code/processor.py" ]
    env:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: WORKLOAD_TYPE
      value: "memory-intensive"
    volumeMounts:
    - name: code
      mountPath: /code
    resources:
      requests:
        memory: "4Gi"
        cpu: "250m"
      limits:
        memory: "6Gi"
        cpu: "500m"
  volumes:
  - name: code
    configMap:
      name: resource-locality-test
  restartPolicy: Never
