apiVersion: v1
kind: Pod
metadata:
  name: scheduler-analysis
  namespace: data-locality-scheduler
spec:
  containers:
  - name: analyzer
    image: bitnami/kubectl:latest
    command: [ "/bin/bash", "-c" ]
    args:
    - |
      echo "===== Data Locality Scheduler Analysis ====="

      # 1. Check node capability labels
      echo -e "\n1. Node Capability Labels:"
      for node in \$(kubectl get nodes -o jsonpath='{.items[*].metadata.name}'); do
        echo -e "\nNode: \$node"
        NODE_TYPE=\$(kubectl get node \$node -o jsonpath='{.metadata.labels.node-capability/node-type}')
        REGION=\$(kubectl get node \$node -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/region}')
        ZONE=\$(kubectl get node \$node -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}')
        echo "Type: \$NODE_TYPE, Region: \$REGION, Zone: \$ZONE"
      done

      # 2. Check storage pod placement
      echo -e "\n2. Storage Pod Placement:"
      kubectl get pods -l 'app in (minio,minio-edge)' -n data-locality-scheduler -o custom-columns=NAME:.metadata.name,NODE:.spec.nodeName,STATUS:.status.phase

      # 3. Check test pod placement
      echo -e "\n3. Test Pod Placement:"
      for pod in data-consumer-pod edge-preferring-workload cloud-preferring-workload region2-workload; do
        POD_NODE=\$(kubectl get pod \$pod -n data-locality-scheduler -o jsonpath='{.spec.nodeName}')
        POD_ANNOTATIONS=\$(kubectl get pod \$pod -n data-locality-scheduler -o json | jq -r '.metadata.annotations | with_entries(select(.key | startswith("data.scheduler") or startswith("scheduler")))')
        NODE_TYPE=\$(kubectl get node \$POD_NODE -o jsonpath='{.metadata.labels.node-capability/node-type}')
        REGION=\$(kubectl get node \$POD_NODE -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/region}')
        ZONE=\$(kubectl get node \$POD_NODE -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}')
        
        echo -e "\nPod: \$pod"
        echo "Scheduled on: \$POD_NODE (Type: \$NODE_TYPE, Region: \$REGION, Zone: \$ZONE)"
        echo "Pod annotations: \$POD_ANNOTATIONS"
        
        # Check specific behavior based on pod type
        if [[ "\$pod" == "edge-preferring-workload" ]]; then
          if [[ "\$NODE_TYPE" == "edge" ]]; then
            echo "‚úÖ Edge preference honored"
          else
            echo "‚ùå Edge preference NOT honored"
          fi
        elif [[ "\$pod" == "cloud-preferring-workload" ]]; then
          if [[ "\$NODE_TYPE" == "cloud" ]]; then
            echo "‚úÖ Cloud preference honored"
          else
            echo "‚ùå Cloud preference NOT honored"
          fi
        elif [[ "\$pod" == "region2-workload" ]]; then
          if [[ "\$REGION" == "region-2" ]]; then
            echo "‚úÖ Region preference honored"
          else
            echo "‚ùå Region preference NOT honored"
          fi
        fi
      done

      # 4. Check data locality for the main data consumer pod
      echo -e "\n4. Data Locality Analysis:"
      DATA_POD_NODE=\$(kubectl get pod data-consumer-pod -n data-locality-scheduler -o jsonpath='{.spec.nodeName}')
      MINIO_NODE=\$(kubectl get pod -l app=minio -n data-locality-scheduler -o jsonpath='{.items[0].spec.nodeName}')

      DATA_POD_ZONE=\$(kubectl get node \$DATA_POD_NODE -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}')
      MINIO_ZONE=\$(kubectl get node \$MINIO_NODE -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}')

      DATA_POD_REGION=\$(kubectl get node \$DATA_POD_NODE -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/region}')
      MINIO_REGION=\$(kubectl get node \$MINIO_NODE -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/region}')

      echo "Data consumer pod on node: \$DATA_POD_NODE"
      echo "MinIO pod on node: \$MINIO_NODE"

      if [[ "\$DATA_POD_NODE" == "\$MINIO_NODE" ]]; then
        echo "‚úÖ PERFECT DATA LOCALITY: Pod and data on same node"
      elif [[ "\$DATA_POD_ZONE" == "\$MINIO_ZONE" ]]; then
        echo "üëç GOOD DATA LOCALITY: Pod and data in same zone"
      elif [[ "\$DATA_POD_REGION" == "\$MINIO_REGION" ]]; then
        echo "üëå ACCEPTABLE DATA LOCALITY: Pod and data in same region"
      else
        echo "‚ö†Ô∏è POOR DATA LOCALITY: Pod and data in different regions"
      fi

      # 5. Check scheduler logs for decision evidence
      echo -e "\n5. Scheduler Decision Logs:"
      SCHEDULER_POD=\$(kubectl get pods -n data-locality-scheduler -l app=data-locality-scheduler -o jsonpath='{.items[0].metadata.name}')
      echo "Locality-related logs:"
      kubectl logs \$SCHEDULER_POD -n data-locality-scheduler | grep -i "data.*local" | tail -10

      echo -e "\nScheduling decision logs:"
      kubectl logs \$SCHEDULER_POD -n data-locality-scheduler | grep -i "scheduling pod" | tail -10  
    resources:
      requests:
        cpu: "250m"
        memory: "64Mi"
      limits:
        cpu: "500m"
        memory: "128Mi"
  restartPolicy: Never
  serviceAccountName: data-locality-scheduler
